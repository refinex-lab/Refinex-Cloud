spring:
  # 定义 Servlet 相关配置
  servlet:
    multipart:
      # 定义上传文件的最大请求大小
      max-request-size: 20MB
      # 定义上传文件的最大大小
      max-file-size: 50MB
  # 定义 MVC 相关配置
  mvc:
    # 定义静态资源的路径模式
    static-path-pattern: /static/**
    format:
      # 定义日期时间格式
      date-time: yyyy-MM-dd HH:mm:ss
  # 定义 Jackson 相关配置
  jackson:
    # 定义日期格式
    date-format: yyyy-MM-dd HH:mm:ss
    # 定义序列化配置
    serialization:
      # 定义是否缩进输出
      indent-output: false
      # 定义是否在序列化时失败时抛出异常
      fail-on-empty-beans: false
    # 定义反序列化配置
    deserialization:
      # 定义是否在反序列化时未知属性失败时抛出异常
      fail-on-unknown-properties: false
  threads:
    virtual:
      # 开启虚拟线程, JDK >= 21
      enabled: true
  task:
    execution:
      # 定义任务执行线程名称前缀
      thread-name-prefix: task-
      # 由 Spring 管理任务执行线程池, SpringBoot 3.5+ SpringBoot 会自动配置线程池
      mode: force
  data:
    # 定义 Redis 相关配置
    redis:
      # 定义 Redis 主机地址
      host: localhost
      # 定义 Redis 端口号
      port: 6379
      # 定义 Redis 密码
      password: 123456
      # 定义 Redis 数据库索引
      database: 0
      # 定义 Redis 连接超时时间, 单位毫秒
      timeout: 10000
      # 定义 Redis SSL 配置
      ssl:
        # 定义是否启用 Redis SSL
        enabled: false
  # 定义数据源相关配置
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    dynamic:
      # 定义默认数据源
      default-datasource: master
      # 严格匹配数据源, 未匹配到数据源时抛出异常
      strict: true
      # 定义 Hikari 连接池配置
      hikari:
        # 定义最大连接数
        maximum-pool-size: 20
        # 定义最小空闲连接数
        minimum-idle: 10
        # 定义连接超时时间, 单位毫秒
        connection-timeout: 30000
        # 定义空闲连接超时时间, 单位毫秒
        idle-timeout: 600000
        # 定义最大生命周期, 单位毫秒
        max-lifetime: 1800000
        # 定义保持连接活动的时间, 单位毫秒
        keepalive-time: 30000
        # 定义验证连接是否活动的超时时间, 单位毫秒
        validation-timeout: 5000

# Sa-Token 相关配置
sa-token:
  # token 名称 (同时也是 cookie 名称)
  token-name: Authorization
  # token 有效期（单位：秒）默认 30 天，-1 代表永久有效
  timeout: 7200
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认 -1 代表不限制，永不冻结
  active-timeout: 1800
  # 是否允许同一账号并发登录（为 true 时允许一起登录，为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时是否共用一个 token（为 true 时所有登录共用一个 token，为 false 时每次登录新建一个 token）
  is-share: false
  # token 风格（可选值：uuid、simple-uuid、random-32、random-64、random-128、tik、jwt-simple）
  token-style: jwt-simple
  # 是否输出操作日志
  is-log: false
  # 开启内网服务调用鉴权（不允许越过 Gateway 访问内网服务，保障服务安全）
  check-same-token: true
  # jwt 秘钥（生产环境必须修改为强密钥，建议使用环境变量注入）
  jwt-secret-key: ${JWT_SECRET_KEY:abcdefghijklmnopqrstuvwxyz1234567890}

# Feign 配置
feign:
  client:
    config:
      default:
        # 连接超时时间（毫秒）
        connect-timeout: 5000
        # 读取超时时间（毫秒）
        read-timeout: 10000
        # 日志级别
        logger-level: basic
  # 启用 Sentinel 熔断降级
  sentinel:
    enabled: false
  # 启用压缩
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

# Logback 配置
logging:
  logback:
    # 定义日志滚动策略
    rollingpolicy:
      # 定义日志文件最大大小
      max-file-size: 100MB
      # 定义是否在启动时清理历史日志文件
      clean-history-on-start: true
      # 定义日志文件总大小上限
      total-size-cap: 1GB
      # 定义保留的最大历史日志文件数量
      max-history: 7
  level:
    org.springframework: warn
    com.alibaba.nacos: error
    org.apache.fury: warn
    io.micrometer: error

# Redisson 相关配置
redisson:
  # 定义 Redisson 键前缀
  key-prefix:
  # 定义 Redisson 线程数
  threads: 4
  # 定义 Redisson Netty 线程数
  netty-threads: 8
  # 定义 Redisson 单节点配置
  single-server-config:
    # 定义 Redisson 客户端名称
    client-name: ${spring.application.name}
    # 定义 Redisson 连接池大小
    connection-pool-size: 32
    # 定义 Redisson 连接池最小空闲连接数
    connection-minimum-idle-size: 8
    # 定义 Redisson 连接超时时间, 单位毫秒
    idle-connection-timeout: 10000
    # 定义 Redisson 连接超时时间, 单位毫秒
    timeout: 3000
    # 定义 Redisson 订阅连接池大小
    subscription-connection-pool-size: 50

# Lock4J 相关配置
lock4j:
  # 定义获取锁的超时时间, 单位毫秒
  acquire-timeout: 3000
  # 定义锁的过期时间, 单位毫秒
  expire: 30000

# Xss 相关配置
xss:
  # 定义是否开启 Xss 过滤
  enabled: true
  # 定义要排除的路径
  exclude-paths:
    - /platform/notice

# Api Doc 相关配置
springdoc:
  api-doc:
    # 定义是否开启 Api Doc
    enabled: true
  info:
    # 定义 Api Doc 标题
    title: Refinex API Doc
    # 定义 Api Doc 描述
    description: Refinex API Doc
    # 定义 Api Doc 版本
    version: 1.0.0
    # 定义 Api Doc 联系人
    contact:
      # 定义 Api Doc 联系人名称
      name: Refinex
      # 定义 Api Doc 联系人邮箱
      email: refinex@gmail.com
      # 定义 Api Doc 联系人 URL
      url: https://refinex.cn

# Refinex 相关配置
refinex:
  # 文件存储配置
  file:
    # 是否启用文件存储模块
    enabled: true
    # 默认存储类型（S3、OSS、COS、KODO、MINIO、DATABASE）
    default-storage-type: S3

    # 上传配置
    upload:
      # 最大文件大小（支持单位：KB、MB、GB）
      max-file-size: 100MB
      # 允许的文件扩展名（为空表示不限制）
      allowed-extensions:
        # 图片类型
        - jpg
        - jpeg
        - png
        - gif
        - bmp
        - webp
        - svg
        # 文档类型
        - pdf
        - doc
        - docx
        - xls
        - xlsx
        - ppt
        - pptx
        - txt
        - md
        # 压缩包类型
        - zip
        - rar
        - 7z
        - tar
        - gz
        # 视频类型
        - mp4
        - avi
        - mov
        - wmv
        - flv
        # 音频类型
        - mp3
        - wav
        - flac
        - aac
      # 分片大小（用于大文件分片上传）
      chunk-size: 5MB

    # 下载配置
    download:
      # 预签名 URL 过期时间（支持单位：s、m、h、d）
      presigned-url-expiration: 1h

    # 图片配置
    image:
      # 缩略图宽度（像素）
      thumbnail-width: 300
      # 缩略图高度（像素）
      thumbnail-height: 300
      # 缩略图格式（webp、jpg、png）
      thumbnail-format: webp

    # 存储配置（可选，优先使用数据库配置）
    # 注意：生产环境建议将存储配置保存到数据库的 file_storage_config 表中
    # 此处配置仅用于开发测试或作为默认配置
    storage:
      # S3 存储配置示例
      s3:
        # 访问密钥（建议使用环境变量注入）
        access-key: ${S3_ACCESS_KEY:your-access-key}
        # 访问密钥（建议使用环境变量注入）
        secret-key: ${S3_SECRET_KEY:your-secret-key}
        # 区域
        region: us-east-1
        # 存储桶名称
        bucket-name: refinex-files
        # 访问端点 URL（可选，用于兼容 MinIO 等 S3 兼容存储）
        endpoint: https://s3.amazonaws.com
        # 基础路径前缀（可选）
        base-path: /uploads
        # 访问域名（可选，用于生成访问 URL）
        domain-url: https://cdn.refinex.cn

      # 阿里云 OSS 存储配置示例
      oss:
        access-key: ${OSS_ACCESS_KEY:your-access-key}
        secret-key: ${OSS_SECRET_KEY:your-secret-key}
        region: oss-cn-hangzhou
        bucket-name: refinex-files
        endpoint: https://oss-cn-hangzhou.aliyuncs.com
        base-path: /uploads
        domain-url: https://cdn.refinex.cn

      # 腾讯云 COS 存储配置示例
      cos:
        access-key: ${COS_ACCESS_KEY:your-access-key}
        secret-key: ${COS_SECRET_KEY:your-secret-key}
        region: ap-guangzhou
        bucket-name: refinex-files
        endpoint: https://cos.ap-guangzhou.myqcloud.com
        base-path: /uploads
        domain-url: https://cdn.refinex.cn

      # 七牛云 Kodo 存储配置示例
      kodo:
        access-key: ${KODO_ACCESS_KEY:your-access-key}
        secret-key: ${KODO_SECRET_KEY:your-secret-key}
        region: cn-east-1
        bucket-name: refinex-files
        endpoint: https://s3-cn-east-1.qiniucs.com
        base-path: /uploads
        domain-url: https://cdn.refinex.cn

      # MinIO 存储配置示例
      minio:
        access-key: ${MINIO_ACCESS_KEY:minioadmin}
        secret-key: ${MINIO_SECRET_KEY:minioadmin}
        region: us-east-1
        bucket-name: refinex-files
        endpoint: http://localhost:9000
        base-path: /uploads
        domain-url: http://localhost:9000