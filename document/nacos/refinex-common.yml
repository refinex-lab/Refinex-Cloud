# ====================================================================
# Spring Boot 核心配置
# ====================================================================
spring:
  main:
    # 允许 Bean 定义覆盖,解决多模块场景下的 Bean 冲突
    allow-bean-definition-overriding: true
    # 延迟初始化, 加速应用启动(生产环境可根据实际情况调整)
    lazy-initialization: false
    # 允许循环依赖(建议在代码层面避免循环依赖)
    allow-circular-references: true

  # Jackson JSON 序列化配置
  jackson:
    # 全局日期时间格式
    date-format: yyyy-MM-dd HH:mm:ss
    # 时区设置
    time-zone: GMT+8
    # 序列化配置
    serialization:
      # 格式化输出(开发环境可设为 true, 生产环境建议 false 以减少流量)
      indent-output: false
      # 允许序列化空对象
      fail-on-empty-beans: false
      # 将日期序列化为时间戳(建议使用字符串格式,设为 false)
      write-dates-as-timestamps: false
      # 将枚举序列化为索引(建议使用字符串,设为 false)
      write-enums-using-index: false
    # 反序列化配置
    deserialization:
      # 忽略未知属性, 提高接口向后兼容性
      fail-on-unknown-properties: false
      # 接受单个值作为数组
      accept-single-value-as-array: true
    # 默认属性包含策略(ALWAYS:全部字段 NON_NULL:非空字段 NON_EMPTY:非空且非Empty)
    default-property-inclusion: always

  # 虚拟线程配置(JDK 21+, Spring Boot 3.2+)
  threads:
    virtual:
      # 启用虚拟线程(注意:当前使用 JDK17, 此配置无效, 需要升级到 JDK21 及以上版本)
      enabled: true

  # 异步任务执行配置
  task:
    execution:
      # 异步任务执行线程池配置
      pool:
        # 核心线程数(建议根据 CPU 核心数调整)
        core-size: 8
        # 最大线程数(建议根据 CPU 核心数调整)
        max-size: 16
        # 队列容量(建议根据任务量调整)
        queue-capacity: 200
        # 线程保持活动时间(建议根据任务量调整)
        keep-alive: 60s
      # 线程名称前缀,便于问题排查
      thread-name-prefix: async-task-
      # Spring 托管线程池生命周期
      shutdown:
        # 是否等待线程池任务完成后关闭
        await-termination: true
        # 等待线程池任务完成的最大时间, 单位秒
        await-termination-period: 60s

    # 定时任务调度配置
    scheduling:
      pool:
        # 定时任务调度线程池大小(建议根据任务量调整)
        size: 4
      # 定时任务调度线程名称前缀, 便于问题排查
      thread-name-prefix: scheduled-task-
      shutdown:
        # 是否等待线程池任务完成后关闭
        await-termination: true
        # 等待线程池任务完成的最大时间, 单位秒
        await-termination-period: 60s

  # Redis 数据源配置
  data:
    redis:
      # Redis 主机地址
      host: 127.0.0.1
      # Redis 端口号
      port: 6379
      # Redis 密码, 默认空字符串
      password:
      # Redis 数据库索引, 默认 0
      database: 0
      # Redis 连接超时时间, 单位毫秒
      timeout: 10s
      # Lettuce 连接池配置
      lettuce:
        pool:
          # 最大连接数(建议根据并发量调整,一般为 CPU 核心数的 2-4 倍)
          max-active: 32
          # 最大空闲连接
          max-idle: 16
          # 最小空闲连接(保持一定数量连接池预热)
          min-idle: 8
          # 连接耗尽时最大等待时间
          max-wait: 3000ms
          # 空闲连接检测间隔
          time-between-eviction-runs: 60s
        # 关闭超时
        shutdown-timeout: 200ms

  cloud:
    # OpenFeign 客户端配置
    openfeign:

      # HttpClient 5 配置
      httpclient:
        # 最大连接数
        max-connections: 200
        # 每个路由的最大连接数
        max-connections-per-route: 50
        # 连接存活时间(秒)
        time-to-live: 900
        # 连接清理定时器间隔
        connection-timer-repeat: 3000
        hc5:
          # 启用 Apache HttpClient 5
          enabled: true

      # OpenFeign 客户端配置
      client:
        config:
          # 全局默认配置
          default:
            # 连接超时时间(毫秒)
            connectTimeout: 5000
            # 读取超时时间(毫秒)
            readTimeout: 10000
            # 日志级别(可选值：NONE、BASIC、HEADERS、FULL)
            loggerLevel: FULL

      # 压缩配置
      compression:
        # 请求压缩配置
        request:
          # 启用请求压缩
          enabled: true
          # 支持压缩的类型
          mime-types: text/xml，application/xml，application/json
          # 最小压缩阈值(字节)， 超过此阈值触发压缩
          min-request-size: 2048
        # 响应压缩配置
        response:
          # 启用响应压缩
          enabled: true

# ====================================================================
# 认证授权配置 (Sa-Token)
# ====================================================================
sa-token:
  # Token 名称(同时作为 Cookie 和 Header 的键名)
  token-name: Authorization
  # Token 前缀(建议加上 Bearer 前缀, 符合 OAuth2 规范)
  token-prefix: Bearer
  # 是否允许动态设置 token 有效期，默认 true
  dynamic-active-timeout: true
  # 是否允许从请求参数读取 token，默认 true
  is-read-body: true
  # Token 有效期, 单位：秒, 默认 30 天, -1 代表永久有效
  # Token 有效期(秒), 建议 2 小时, 通过刷新机制延长
  timeout: 7200
  # 最小活跃间隔(秒), 超过此时间未活跃则 Token 失效, 默认 -1 表示不限制
  active-timeout: 3600
  # 是否允许同一账号多端登录, true：允许一起登录, false：新登录挤掉旧登录
  is-concurrent: true
  # 多端登录是否共享同一 Token(建议 false, 提高安全性)
  is-share: false
  # Token 风格 (可选值：uuid(性能好)、simple-uuid、random-32、random-64、random-128、tik、jwt-simple(便于携带信息))
  token-style: uuid
  # 是否输出操作日志(生产环境建议关闭)
  is-log: false
  # 是否尝试从 Cookie 中读取 Token
  is-read-cookie: false
  # 是否尝试从 Header 中读取 Token
  is-read-header: true
  # 是否在登录后将 Token 写入 Cookie
  is-write-header: true
  # 同 Token 检查(用于微服务网关鉴权)
  check-same-token: true
  # Token 续期配置, 单位秒, 默认 -1 表示不限制
  token-session-timeout: -1
  # 自动续签(每次访问自动续期)
  auto-renew: true
  # JWT 密钥
  jwt-secret-key: abcdefghijklmnopqrstuvwxyz

# ====================================================================
# 日志配置
# ====================================================================
logging:
  # 日志级别配置(开发环境可适当调高,生产环境应控制日志量)
  level:
    root: INFO
    # Spring 框架日志
    org.springframework: WARN
    org.springframework.web: INFO
    org.springframework.boot.autoconfigure: ERROR
    # 数据库相关
    org.mybatis: WARN
    com.zaxxer.hikari: WARN
    # Nacos 客户端
    com.alibaba.nacos: ERROR
    # 其他第三方框架
    org.apache.fury: ERROR
    io.micrometer: WARN
    io.lettuce: WARN
    # 业务包日志(根据实际包名调整)
    cn.refinex: INFO
    # OpenFeign 日志(Feign 接口所在包)
    cn.refinex.api.platform.client: DEBUG
  # Logback 滚动策略
  logback:
    rollingpolicy:
      # 单个日志文件最大大小
      max-file-size: 100MB
      # 日志文件总大小上限
      total-size-cap: 10GB
      # 保留的历史日志天数
      max-history: 30
      # 启动时清理历史日志(建议关闭, 避免误删)
      clean-history-on-start: false

# ====================================================================
# Redisson 分布式框架配置
# ====================================================================
redisson:
  # 统一键前缀, 避免多应用共用 Redis 时的键冲突
  key-prefix: "refinex:"
  # Redisson 线程池配置(建议为 CPU 核心数)
  threads: 8
  # Netty 线程数(建议为 CPU 核心数的 2 倍)
  netty-threads: 16
  # 编解码器(建议使用 Kryo 或 FST, 性能优于 JDK 序列化)
  codec: org.redisson.codec.Kryo5Codec
  # 单节点配置
  single-server-config:
    # 客户端名称
    client-name: ${spring.application.name}
    # 连接池大小(建议根据并发量调整)
    connection-pool-size: 64
    # 最小空闲连接数
    connection-minimum-idle-size: 16
    # 空闲连接超时(毫秒)
    idle-connection-timeout: 10000
    # 命令执行超时(毫秒)
    timeout: 3000
    # 连接超时(毫秒)
    connect-timeout: 3000
    # 命令重试次数
    retry-attempts: 3
    # 命令重试间隔(毫秒)
    retry-interval: 1500
    # 订阅连接池大小
    subscription-connection-pool-size: 50
    # 订阅连接最小空闲数
    subscription-connection-minimum-idle-size: 1
    # DNS 监控间隔(毫秒)
    dns-monitoring-interval: 5000

# ====================================================================
# 分布式锁配置 (Lock4j)
# ====================================================================
lock4j:
  # 获取锁超时时间(毫秒)
  acquire-timeout: 3000
  # 锁过期时间(毫秒), 防止死锁
  expire: 30000

# ====================================================================
# 监控端点配置 (Actuator)
# ====================================================================
management:
  endpoints:
    web:
      # 端点基础路径
      base-path: /actuator
      exposure:
        # 暴露的端点(生产环境建议限制暴露范围)
        include: health,info,metrics,prometheus
  endpoint:
    health:
      # 健康检查显示详情(生产环境建议 when-authorized)
      show-details: when-authorized
      # 启用探针(用于 Kubernetes 健康检查)
      probes:
        enabled: true
  # 指标导出配置
  metrics:
    tags:
      # 添加应用标签,便于 Prometheus 区分不同服务
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true
  # 健康检查配置
  health:
    redis:
      enabled: true
    db:
      enabled: false

# ====================================================================
# Http Interface 配置
# ====================================================================
http-interface-client:
  # 默认基础 URL (用于网关调用场景或降级场景)
  base-url: http://127.0.0.1:8082/
  
  # 是否优先使用服务直连 (默认 true)
  # true: 优先使用 services 配置的服务地址，未配置时降级到 baseUrl
  # false: 始终使用 baseUrl (网关模式)
  prefer-direct-call: true
  
  # 按服务名配置的 URL 映射 (用于服务间直连场景)
  # 支持两种格式：
  # 1. lb://service-name - 使用 Spring Cloud LoadBalancer 进行服务发现和负载均衡
  # 2. http://IP:PORT - 直接指定服务地址
  services:
    # 认证服务 (使用负载均衡)
    refinex-auth: lb://refinex-auth
    # 平台服务 (使用负载均衡)
    refinex-platform: lb://refinex-platform
    # 知识库服务 (使用负载均衡)
    # refinex-kb: lb://refinex-kb
    # AI服务 (使用负载均衡)
    # refinex-ai: lb://refinex-ai

# ====================================================================
# Open API 文档配置
# ====================================================================
# SpringDoc 核心配置
springdoc:
  # API 文档配置
  api-docs:
    # 是否启用 API 文档
    enabled: true
    # API 文档 JSON 路径
    path: /v3/api-docs
  # Swagger UI 配置
  swagger-ui:
    # 是否启用 Swagger UI
    enabled: true
    # Swagger UI 访问路径
    path: /swagger-ui.html
  # 默认分组（可选，通过代码 SwaggerAutoConfiguration 配置）
  default-flat-param-object: false

# Knife4j 增强配置
knife4j:
  # 是否启用 Knife4j（生产环境建议关闭）
  enable: true
  # 生产环境保护（设置为 true 时需要 Basic 认证才能访问文档）
  production: false
  # Basic 认证配置（仅在 production=true 时生效）
  #basic:
  #  enable: true
  #  username: admin
  #  password: 123456

  # UI 增强设置
  setting:
    # 语言：zh_cn-简体中文, en-英文
    language: zh_cn
    # 是否显示 Models（实体类列表）
    enable-swagger-models: true
    # 是否启用文档管理
    enable-document-manage: true
    # Models 显示名称
    swagger-model-name: 实体类列表
    # 是否显示版本号
    enable-version: true
    # 是否启用重载缓存参数
    enable-reload-cache-parameter: false
    # 是否启用调试后脚本
    enable-after-script: true
    # 文件上传接口过滤（指定请求方法类型）
    enable-filter-multipart-api-method-type: POST
    # 针对 RequestMapping 的接口请求类型过滤
    enable-filter-multipart-apis: false
    # 是否启用请求缓存
    enable-request-cache: true
    # 是否启用 Host 设置
    enable-host: false
    # 是否启用自定义主页内容
    enable-home-custom: false
    # 自定义主页内容路径
    #home-custom-location: classpath:markdown/home.md
    # 是否启用搜索功能
    enable-search: true
    # 是否显示页脚
    enable-footer: true
    # 是否自定义页脚
    enable-footer-custom: true
    # 页脚内容
    footer-custom-content: Copyright © 2025 Refinex Cloud
    # 是否启用动态参数调试
    enable-dynamic-parameter: true
    # 是否显示 debug 调试
    enable-debug: true
    # 是否启用 OpenAPI 规范
    enable-open-api: true
    # 是否启用分组
    enable-group: true

# ====================================================================
# 业务自定义配置
# ====================================================================
refinex:
  biz:
    # 数据库敏感数据加密密钥(通过 CryptoUtilsTest.handleKeyGenerationOperations[1] 生成)
    dbSensitiveDataKey: dg6y46DTyCvlAoL/vUfB/HOKAcz2t87BdJf3uYCkj3w=
    # 超级管理员配置(自动初始化)
    superAdmin:
      # 用户名
      username: refinex
      # 昵称
      nickname: 沉默的老李
      # 手机号
      mobile: 18800000000
      # 邮箱
      email: refinex@163.com
      # 密码(默认 refinex.cn)
      password: refinex.cn

  # Xss 过滤配置
  xss:
    # 是否开启 Xss 过滤
    enabled: true
    # 排除路径(不进行 XSS 过滤)
    exclude-paths:
      - /actuator/**
      - /swagger-ui/**
      - /v3/api-docs/**
      - /webjars/**

  # API 文档配置 (Swagger/OpenAPI)
  swagger:
    # 是否启用(生产环境建议关闭)
    enabled: true
    # 标题
    title: ${spring.application.name} API 文档
    # 描述
    description: ${spring.application.name} RESTful API 接口文档
    # 版本
    version: 1.0.0
    # 联系人名称
    contact-name: Refinex
    # 联系人邮箱
    contact-email: refinex@gmail.com
    # 联系人 URL
    contact-url: https://refinex.cn
    # 许可证
    license: Apache License 2.0
    # 许可证 URL
    license-url: https://www.apache.org/licenses/LICENSE-2.0.html